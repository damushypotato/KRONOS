#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <LiquidCrystal_I2C.h>
#include <TinyGPSPlus.h>
#include <SD.h>

// OLED
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);

// GPS
TinyGPSPlus gps;
#define GPS_SERIAL Serial1
#define GPS_BAUD 9600
const unsigned char UBLOX_INIT[] PROGMEM = {
     0xB5,0x62,0x06,0x08,0x06,0x00,0x64,0x00,0x01,0x00,0x01,0x00,0x7A,0x12, //(10Hz)
     // 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A, //(5Hz)
     //   0xB5,0x62,0x06,0x08,0x06,0x00,0xE8,0x03,0x01,0x00,0x01,0x00,0x01,0x39 //(1Hz)
};

// SD
#define SD_CS 10
bool serial_only = false;
char filename[] = "LOG0000.CSV";
void setupSD();
void writeToSD();

// --- Bitmap Data ---
// 'k3r', 128x32px
const unsigned char epd_bitmap_k3r[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x83, 0x0f, 0x87, 0xfe, 0x01, 0xe1, 0xc2, 0x1c, 0x3c, 0x0f, 0x03, 0x81, 0x83, 0xf0, 0xff, 0x0f,
  0x83, 0x0e, 0x01, 0xfe, 0x00, 0x71, 0xc2, 0x1c, 0x38, 0x0f, 0x03, 0x81, 0x83, 0xc0, 0x3c, 0x03,
  0x83, 0x0c, 0x00, 0xfe, 0x00, 0x30, 0xc6, 0x0c, 0x38, 0x07, 0x03, 0x81, 0x83, 0x80, 0x18, 0x01,
  0x82, 0x1c, 0x30, 0xfe, 0x0c, 0x30, 0xc6, 0x0c, 0x38, 0x07, 0x01, 0x81, 0x83, 0x06, 0x18, 0x61,
  0x82, 0x1c, 0x30, 0xfe, 0x0c, 0x30, 0x86, 0x0c, 0x38, 0x07, 0x01, 0x01, 0x83, 0x06, 0x18, 0x61,
  0x82, 0x1c, 0x30, 0xfe, 0x0c, 0x38, 0x86, 0x04, 0x38, 0x47, 0x01, 0x01, 0x83, 0x0e, 0x18, 0x61,
  0x80, 0x3f, 0xf0, 0xfe, 0x0c, 0x38, 0x8e, 0x04, 0x38, 0xc7, 0x01, 0x01, 0x83, 0x0e, 0x18, 0x7f,
  0x80, 0x3f, 0xc0, 0xfe, 0x0c, 0x38, 0x0e, 0x04, 0x38, 0xc7, 0x01, 0x01, 0x83, 0x0e, 0x18, 0x1f,
  0x80, 0x3f, 0xc1, 0xfe, 0x0c, 0x3c, 0x0e, 0x00, 0x38, 0xc7, 0x08, 0x21, 0x83, 0x0f, 0xfc, 0x07,
  0x80, 0x3f, 0xc0, 0xfe, 0x0c, 0x3c, 0x1e, 0x00, 0x30, 0xc3, 0x08, 0x21, 0x83, 0x0f, 0xfe, 0x03,
  0x80, 0x3f, 0xf0, 0xfe, 0x0c, 0x3c, 0x1e, 0x00, 0x30, 0xc3, 0x08, 0x21, 0x83, 0x0f, 0xff, 0x81,
  0x80, 0x1c, 0x30, 0x7e, 0x0c, 0x3c, 0x1e, 0x10, 0x30, 0xc3, 0x08, 0x21, 0x83, 0x0e, 0x1f, 0xe1,
  0x82, 0x1c, 0x30, 0x7e, 0x0c, 0x3e, 0x1e, 0x10, 0x30, 0xc3, 0x08, 0x21, 0x83, 0x0e, 0x18, 0x61,
  0x82, 0x1c, 0x30, 0x7e, 0x0c, 0x3e, 0x1e, 0x10, 0x30, 0x03, 0x0c, 0x21, 0x83, 0x0e, 0x18, 0x60,
  0x82, 0x1c, 0x30, 0x7e, 0x0c, 0x3e, 0x1e, 0x18, 0x30, 0x03, 0x0c, 0x61, 0x83, 0x06, 0x18, 0x60,
  0x82, 0x0c, 0x30, 0xfe, 0x08, 0x3e, 0x1e, 0x18, 0x30, 0x01, 0x0c, 0x61, 0x83, 0x06, 0x18, 0x61,
  0x83, 0x0e, 0x00, 0xfe, 0x00, 0x3e, 0x1e, 0x18, 0x20, 0xc1, 0x0c, 0x61, 0x83, 0x80, 0x3c, 0x01,
  0x83, 0x0e, 0x01, 0xfe, 0x00, 0x3e, 0x1e, 0x1c, 0x20, 0xc1, 0x0c, 0x61, 0x83, 0xc0, 0x3c, 0x03,
  0x83, 0x07, 0x87, 0xfe, 0x00, 0xfe, 0x1e, 0x1c, 0x20, 0xe1, 0x0c, 0x61, 0x83, 0xf1, 0xff, 0x8f,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0xff, 0xff, 0xff, 0xff,
  0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0x1c, 0x71, 0xc7, 0x1c, 0x7f, 0xff, 0x1c,
  0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x81, 0xc7, 0x1c, 0x71, 0xc7, 0x1c,
  0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0x1c, 0x71, 0xc7, 0x1c,
  0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0xe3, 0x8e, 0x38, 0xe3, 0x81, 0xc7, 0xe3,
  0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x7e, 0x38, 0xe3, 0x8e, 0x38, 0xe3,
  0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0x1c, 0x71, 0xc7, 0xe3, 0x8e, 0x38, 0xe3,
  0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0x1c, 0x71, 0xc7, 0x1c, 0x7e, 0x38, 0x1c,
  0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x8e, 0x38, 0xe3, 0x81, 0xc7, 0x1c, 0x71, 0xc7, 0x1c
};
// 'kr1', 128x32px
const unsigned char epd_bitmap_kr1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xe0, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0xf8, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x78, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x3f, 0xf9, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x1f, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x38, 0x1f, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x38, 0x3f, 0x01, 0xc1, 0xc3, 0x3f, 0x81, 0xf0, 0xe3, 0x07, 0xc0, 0xf8, 0x00, 0x01, 0xc0,
  0x00, 0x38, 0x7b, 0x81, 0xc1, 0xc6, 0x3f, 0xc3, 0xf8, 0xf3, 0x0f, 0xe1, 0xfc, 0x00, 0x07, 0xc0,
  0x00, 0x38, 0xf1, 0x81, 0x81, 0xc6, 0x38, 0xe7, 0x18, 0xf3, 0x1c, 0x63, 0x8c, 0x00, 0x0e, 0xc0,
  0x00, 0x39, 0xe1, 0xc1, 0x81, 0xcc, 0x38, 0x67, 0x18, 0xf3, 0x1c, 0x63, 0x84, 0x00, 0x0c, 0xc0,
  0x00, 0x3f, 0xc0, 0xc1, 0x81, 0xcc, 0x38, 0xe6, 0x1c, 0xfb, 0x18, 0x71, 0x80, 0x00, 0x00, 0xc0,
  0x00, 0x3f, 0x00, 0x61, 0x81, 0xd8, 0x39, 0xc6, 0x1c, 0xdb, 0x18, 0x71, 0xf0, 0x00, 0x00, 0xc0,
  0x00, 0x3f, 0x00, 0x61, 0x81, 0xf8, 0x3f, 0xc6, 0x1c, 0xdb, 0x18, 0x70, 0xf8, 0x00, 0x00, 0xc0,
  0x00, 0x3c, 0x00, 0x71, 0x81, 0xf8, 0x3f, 0x86, 0x1c, 0xcf, 0x18, 0x70, 0x1c, 0x00, 0x00, 0xc0,
  0x00, 0x3c, 0x00, 0x71, 0x81, 0xcc, 0x39, 0x86, 0x1c, 0xcf, 0x18, 0x70, 0x0e, 0x00, 0x00, 0xc0,
  0x00, 0x78, 0x38, 0x31, 0x81, 0xcc, 0x39, 0x87, 0x18, 0xcf, 0x1c, 0x63, 0x06, 0x00, 0x00, 0xc0,
  0x00, 0xf8, 0x78, 0x3b, 0x81, 0xc6, 0x38, 0xc7, 0x18, 0xc7, 0x1c, 0x63, 0x8e, 0x0e, 0x00, 0xc0,
  0x01, 0xdc, 0xf8, 0x1f, 0x81, 0xc7, 0x38, 0xc3, 0xf8, 0xc7, 0x0f, 0xe1, 0xfc, 0x0e, 0x07, 0xf8,
  0x07, 0x9f, 0xf0, 0x1f, 0x81, 0xc3, 0x38, 0x61, 0xf0, 0xc3, 0x07, 0xc0, 0xf8, 0x0e, 0x0f, 0xf8,
  0x07, 0x1f, 0xf0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1e, 0x1f, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1c, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x1f, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x1e, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1056)
const int epd_bitmap_allArray_LEN = 2;
const unsigned char* epd_bitmap_allArray[2] = {
  epd_bitmap_k3r,
  epd_bitmap_kr1
};

void setup() {
    // Init Serial
    Serial.begin(115200);
    while (!Serial) {
        ;
    }

    // Init OLED
    Wire.begin();
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        for (;;);
    }
    display.clearDisplay();
    display.display();

    // Init LCD
    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("Hello, World!");

    // Init SD
    setupSD();

    // Init GPS
    GPS_SERIAL.begin(GPS_BAUD);
}

void loop() {
    static uint8_t idx = 0;
    idx = (idx + 1) % epd_bitmap_allArray_LEN;
    display.clearDisplay();
    display.drawBitmap(0, 0, epd_bitmap_allArray[idx], SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
    display.display();
    delay(5000);
}

void setupSD() {
    if (!SD.begin(SD_CS))
    {
        Serial.println("Card failed, or not present, switching to serial output");
        serial_only = true;
    }
    {
        Serial.println("Card failed, or not present, switching to serial output");
        serial_only = true;
    }

    if (serial_only)
    {
        return;
    }

    for (uint8_t i = 0; i < 10000; i++)
    {
        filename[3] = i / 1000 + '0';
        filename[4] = (i % 1000) / 100 + '0';
        filename[5] = (i % 100) / 10 + '0';
        filename[6] = i % 10 + '0';
        if (!SD.exists(filename))
        {
            break;
        }

        if (i == 9999)
        {
            Serial.println("Couldnt create file. switching to serial output");
            serial_only = true;
            return;
        }
    }

    File dataFile = SD.open(filename, FILE_WRITE);

    if (!dataFile)
    {
        Serial.println("error opening file");
        while (1)
        {
            delay(10);
        }
    }

    dataFile.println("Timestamp, Speed, Lat, Long");

    dataFile.close();

    Serial.print("Logging to: ");
    Serial.println(filename);
}

void writeToSD()
{
    File dataFile = SD.open(filename, O_CREAT | O_WRITE | O_APPEND);

    if (dataFile)
    {
        dataFile.print(micros());
        dataFile.print(", ");
        // dataFile.print(a.acceleration.x);
        dataFile.print(", ");
        // dataFile.print(a.acceleration.y);
        dataFile.print(", ");
        // dataFile.println(a.acceleration.z);

        dataFile.close();
    }
    else
    {
        Serial.println("error opening file");
    }
}
